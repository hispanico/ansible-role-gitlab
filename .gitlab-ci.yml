---

.script_template: &testing_script
  tags:
   - docker-tester
  script:
    # Download test shim.
    - wget -O ${PWD}/tests/test.sh https://gitlab.ninux.org/snippets/10/raw
    - chmod +x ${PWD}/tests/test.sh

    # Run tests.
    - ${PWD}/tests/test.sh

    # Make sure GitLab is running.
    - >
      docker exec ${container_id} curl --insecure -s --head https://localhost/users/password/new
      | sed -n '1p' | grep -q '200'
      && (echo 'Status code 200 test: pass' && exit 0)
      || (echo 'Status code 200 test: fail' && exit 1)

  after_script:
    - docker rm -f $container_id

variables:
  cleanup: 'false'
  container_id: '$CI_JOB_NAME-$CI_PROJECT_NAME-Pipeline$CI_PIPELINE_ID-Job$CI_JOB_ID'

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

.Ubuntu1604:
  variables:
    distro: ubuntul1604
    playbook: test.yml

  <<: *testing_script


Centos7:
  variables:
    distro: centos:7
    playbook: test.yml

  <<: *testing_script

Centos6:
  variables:
    distro: centos:6
    playbook: test.yml

  <<: *testing_script

.Ubuntu1404:
  variables:
    distro: ubuntu1404
    playbook: test.yml

  <<: *testing_script

.Debian9:
  variables:
    distro: debian9
    playbook: test.yml

  <<: *testing_script

Centos7_GitlabVersion:
  variables:
    distro: centos:7
    playbook: test-version.yml

  <<: *testing_script

.Ubuntu1604_GitlabVersion:
  variables:
    distro: ubuntu1604
    playbook: test-version.yml

  <<: *testing_script

